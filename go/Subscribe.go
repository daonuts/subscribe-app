// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package subscribe

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SubscribeABI is the input ABI used to generate the binding from.
const SubscribeABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_DURATION_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"expirations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"setDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subscriber\",\"type\":\"address\"},{\"name\":\"_units\",\"type\":\"uint16\"}],\"name\":\"subscribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_PRICE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint64\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"DurationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]"

// SubscribeBin is the compiled bytecode used for deploying new contracts.
const SubscribeBin = ``

// DeploySubscribe deploys a new Ethereum contract, binding an instance of Subscribe to it.
func DeploySubscribe(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Subscribe, error) {
	parsed, err := abi.JSON(strings.NewReader(SubscribeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SubscribeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Subscribe{SubscribeCaller: SubscribeCaller{contract: contract}, SubscribeTransactor: SubscribeTransactor{contract: contract}, SubscribeFilterer: SubscribeFilterer{contract: contract}}, nil
}

// Subscribe is an auto generated Go binding around an Ethereum contract.
type Subscribe struct {
	SubscribeCaller     // Read-only binding to the contract
	SubscribeTransactor // Write-only binding to the contract
	SubscribeFilterer   // Log filterer for contract events
}

// SubscribeCaller is an auto generated read-only Go binding around an Ethereum contract.
type SubscribeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubscribeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SubscribeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubscribeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SubscribeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubscribeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SubscribeSession struct {
	Contract     *Subscribe        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SubscribeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SubscribeCallerSession struct {
	Contract *SubscribeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SubscribeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SubscribeTransactorSession struct {
	Contract     *SubscribeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SubscribeRaw is an auto generated low-level Go binding around an Ethereum contract.
type SubscribeRaw struct {
	Contract *Subscribe // Generic contract binding to access the raw methods on
}

// SubscribeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SubscribeCallerRaw struct {
	Contract *SubscribeCaller // Generic read-only contract binding to access the raw methods on
}

// SubscribeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SubscribeTransactorRaw struct {
	Contract *SubscribeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSubscribe creates a new instance of Subscribe, bound to a specific deployed contract.
func NewSubscribe(address common.Address, backend bind.ContractBackend) (*Subscribe, error) {
	contract, err := bindSubscribe(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Subscribe{SubscribeCaller: SubscribeCaller{contract: contract}, SubscribeTransactor: SubscribeTransactor{contract: contract}, SubscribeFilterer: SubscribeFilterer{contract: contract}}, nil
}

// NewSubscribeCaller creates a new read-only instance of Subscribe, bound to a specific deployed contract.
func NewSubscribeCaller(address common.Address, caller bind.ContractCaller) (*SubscribeCaller, error) {
	contract, err := bindSubscribe(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SubscribeCaller{contract: contract}, nil
}

// NewSubscribeTransactor creates a new write-only instance of Subscribe, bound to a specific deployed contract.
func NewSubscribeTransactor(address common.Address, transactor bind.ContractTransactor) (*SubscribeTransactor, error) {
	contract, err := bindSubscribe(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SubscribeTransactor{contract: contract}, nil
}

// NewSubscribeFilterer creates a new log filterer instance of Subscribe, bound to a specific deployed contract.
func NewSubscribeFilterer(address common.Address, filterer bind.ContractFilterer) (*SubscribeFilterer, error) {
	contract, err := bindSubscribe(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SubscribeFilterer{contract: contract}, nil
}

// bindSubscribe binds a generic wrapper to an already deployed contract.
func bindSubscribe(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SubscribeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Subscribe *SubscribeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Subscribe.Contract.SubscribeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Subscribe *SubscribeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Subscribe.Contract.SubscribeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Subscribe *SubscribeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Subscribe.Contract.SubscribeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Subscribe *SubscribeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Subscribe.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Subscribe *SubscribeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Subscribe.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Subscribe *SubscribeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Subscribe.Contract.contract.Transact(opts, method, params...)
}

// SETDURATIONROLE is a free data retrieval call binding the contract method 0x1566085c.
//
// Solidity: function SET_DURATION_ROLE() constant returns(bytes32)
func (_Subscribe *SubscribeCaller) SETDURATIONROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "SET_DURATION_ROLE")
	return *ret0, err
}

// SETDURATIONROLE is a free data retrieval call binding the contract method 0x1566085c.
//
// Solidity: function SET_DURATION_ROLE() constant returns(bytes32)
func (_Subscribe *SubscribeSession) SETDURATIONROLE() ([32]byte, error) {
	return _Subscribe.Contract.SETDURATIONROLE(&_Subscribe.CallOpts)
}

// SETDURATIONROLE is a free data retrieval call binding the contract method 0x1566085c.
//
// Solidity: function SET_DURATION_ROLE() constant returns(bytes32)
func (_Subscribe *SubscribeCallerSession) SETDURATIONROLE() ([32]byte, error) {
	return _Subscribe.Contract.SETDURATIONROLE(&_Subscribe.CallOpts)
}

// SETPRICEROLE is a free data retrieval call binding the contract method 0x74e805e9.
//
// Solidity: function SET_PRICE_ROLE() constant returns(bytes32)
func (_Subscribe *SubscribeCaller) SETPRICEROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "SET_PRICE_ROLE")
	return *ret0, err
}

// SETPRICEROLE is a free data retrieval call binding the contract method 0x74e805e9.
//
// Solidity: function SET_PRICE_ROLE() constant returns(bytes32)
func (_Subscribe *SubscribeSession) SETPRICEROLE() ([32]byte, error) {
	return _Subscribe.Contract.SETPRICEROLE(&_Subscribe.CallOpts)
}

// SETPRICEROLE is a free data retrieval call binding the contract method 0x74e805e9.
//
// Solidity: function SET_PRICE_ROLE() constant returns(bytes32)
func (_Subscribe *SubscribeCallerSession) SETPRICEROLE() ([32]byte, error) {
	return _Subscribe.Contract.SETPRICEROLE(&_Subscribe.CallOpts)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Subscribe *SubscribeCaller) AllowRecoverability(opts *bind.CallOpts, token common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "allowRecoverability", token)
	return *ret0, err
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Subscribe *SubscribeSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Subscribe.Contract.AllowRecoverability(&_Subscribe.CallOpts, token)
}

// AllowRecoverability is a free data retrieval call binding the contract method 0x7e7db6e1.
//
// Solidity: function allowRecoverability(address token) constant returns(bool)
func (_Subscribe *SubscribeCallerSession) AllowRecoverability(token common.Address) (bool, error) {
	return _Subscribe.Contract.AllowRecoverability(&_Subscribe.CallOpts, token)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Subscribe *SubscribeCaller) AppId(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "appId")
	return *ret0, err
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Subscribe *SubscribeSession) AppId() ([32]byte, error) {
	return _Subscribe.Contract.AppId(&_Subscribe.CallOpts)
}

// AppId is a free data retrieval call binding the contract method 0x80afdea8.
//
// Solidity: function appId() constant returns(bytes32)
func (_Subscribe *SubscribeCallerSession) AppId() ([32]byte, error) {
	return _Subscribe.Contract.AppId(&_Subscribe.CallOpts)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Subscribe *SubscribeCaller) CanForward(opts *bind.CallOpts, _sender common.Address, arg1 []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "canForward", _sender, arg1)
	return *ret0, err
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Subscribe *SubscribeSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Subscribe.Contract.CanForward(&_Subscribe.CallOpts, _sender, arg1)
}

// CanForward is a free data retrieval call binding the contract method 0xc0774df3.
//
// Solidity: function canForward(address _sender, bytes ) constant returns(bool)
func (_Subscribe *SubscribeCallerSession) CanForward(_sender common.Address, arg1 []byte) (bool, error) {
	return _Subscribe.Contract.CanForward(&_Subscribe.CallOpts, _sender, arg1)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Subscribe *SubscribeCaller) CanPerform(opts *bind.CallOpts, _sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "canPerform", _sender, _role, _params)
	return *ret0, err
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Subscribe *SubscribeSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Subscribe.Contract.CanPerform(&_Subscribe.CallOpts, _sender, _role, _params)
}

// CanPerform is a free data retrieval call binding the contract method 0xa1658fad.
//
// Solidity: function canPerform(address _sender, bytes32 _role, uint256[] _params) constant returns(bool)
func (_Subscribe *SubscribeCallerSession) CanPerform(_sender common.Address, _role [32]byte, _params []*big.Int) (bool, error) {
	return _Subscribe.Contract.CanPerform(&_Subscribe.CallOpts, _sender, _role, _params)
}

// Duration is a free data retrieval call binding the contract method 0x0fb5a6b4.
//
// Solidity: function duration() constant returns(uint64)
func (_Subscribe *SubscribeCaller) Duration(opts *bind.CallOpts) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "duration")
	return *ret0, err
}

// Duration is a free data retrieval call binding the contract method 0x0fb5a6b4.
//
// Solidity: function duration() constant returns(uint64)
func (_Subscribe *SubscribeSession) Duration() (uint64, error) {
	return _Subscribe.Contract.Duration(&_Subscribe.CallOpts)
}

// Duration is a free data retrieval call binding the contract method 0x0fb5a6b4.
//
// Solidity: function duration() constant returns(uint64)
func (_Subscribe *SubscribeCallerSession) Duration() (uint64, error) {
	return _Subscribe.Contract.Duration(&_Subscribe.CallOpts)
}

// Expirations is a free data retrieval call binding the contract method 0x3c74db0f.
//
// Solidity: function expirations(address ) constant returns(uint64)
func (_Subscribe *SubscribeCaller) Expirations(opts *bind.CallOpts, arg0 common.Address) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "expirations", arg0)
	return *ret0, err
}

// Expirations is a free data retrieval call binding the contract method 0x3c74db0f.
//
// Solidity: function expirations(address ) constant returns(uint64)
func (_Subscribe *SubscribeSession) Expirations(arg0 common.Address) (uint64, error) {
	return _Subscribe.Contract.Expirations(&_Subscribe.CallOpts, arg0)
}

// Expirations is a free data retrieval call binding the contract method 0x3c74db0f.
//
// Solidity: function expirations(address ) constant returns(uint64)
func (_Subscribe *SubscribeCallerSession) Expirations(arg0 common.Address) (uint64, error) {
	return _Subscribe.Contract.Expirations(&_Subscribe.CallOpts, arg0)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Subscribe *SubscribeCaller) GetEVMScriptExecutor(opts *bind.CallOpts, _script []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "getEVMScriptExecutor", _script)
	return *ret0, err
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Subscribe *SubscribeSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Subscribe.Contract.GetEVMScriptExecutor(&_Subscribe.CallOpts, _script)
}

// GetEVMScriptExecutor is a free data retrieval call binding the contract method 0x2914b9bd.
//
// Solidity: function getEVMScriptExecutor(bytes _script) constant returns(address)
func (_Subscribe *SubscribeCallerSession) GetEVMScriptExecutor(_script []byte) (common.Address, error) {
	return _Subscribe.Contract.GetEVMScriptExecutor(&_Subscribe.CallOpts, _script)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Subscribe *SubscribeCaller) GetEVMScriptRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "getEVMScriptRegistry")
	return *ret0, err
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Subscribe *SubscribeSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Subscribe.Contract.GetEVMScriptRegistry(&_Subscribe.CallOpts)
}

// GetEVMScriptRegistry is a free data retrieval call binding the contract method 0xa479e508.
//
// Solidity: function getEVMScriptRegistry() constant returns(address)
func (_Subscribe *SubscribeCallerSession) GetEVMScriptRegistry() (common.Address, error) {
	return _Subscribe.Contract.GetEVMScriptRegistry(&_Subscribe.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Subscribe *SubscribeCaller) GetInitializationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "getInitializationBlock")
	return *ret0, err
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Subscribe *SubscribeSession) GetInitializationBlock() (*big.Int, error) {
	return _Subscribe.Contract.GetInitializationBlock(&_Subscribe.CallOpts)
}

// GetInitializationBlock is a free data retrieval call binding the contract method 0x8b3dd749.
//
// Solidity: function getInitializationBlock() constant returns(uint256)
func (_Subscribe *SubscribeCallerSession) GetInitializationBlock() (*big.Int, error) {
	return _Subscribe.Contract.GetInitializationBlock(&_Subscribe.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Subscribe *SubscribeCaller) GetRecoveryVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "getRecoveryVault")
	return *ret0, err
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Subscribe *SubscribeSession) GetRecoveryVault() (common.Address, error) {
	return _Subscribe.Contract.GetRecoveryVault(&_Subscribe.CallOpts)
}

// GetRecoveryVault is a free data retrieval call binding the contract method 0x32f0a3b5.
//
// Solidity: function getRecoveryVault() constant returns(address)
func (_Subscribe *SubscribeCallerSession) GetRecoveryVault() (common.Address, error) {
	return _Subscribe.Contract.GetRecoveryVault(&_Subscribe.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Subscribe *SubscribeCaller) HasInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "hasInitialized")
	return *ret0, err
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Subscribe *SubscribeSession) HasInitialized() (bool, error) {
	return _Subscribe.Contract.HasInitialized(&_Subscribe.CallOpts)
}

// HasInitialized is a free data retrieval call binding the contract method 0x0803fac0.
//
// Solidity: function hasInitialized() constant returns(bool)
func (_Subscribe *SubscribeCallerSession) HasInitialized() (bool, error) {
	return _Subscribe.Contract.HasInitialized(&_Subscribe.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Subscribe *SubscribeCaller) IsForwarder(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "isForwarder")
	return *ret0, err
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Subscribe *SubscribeSession) IsForwarder() (bool, error) {
	return _Subscribe.Contract.IsForwarder(&_Subscribe.CallOpts)
}

// IsForwarder is a free data retrieval call binding the contract method 0xfd64eccb.
//
// Solidity: function isForwarder() constant returns(bool)
func (_Subscribe *SubscribeCallerSession) IsForwarder() (bool, error) {
	return _Subscribe.Contract.IsForwarder(&_Subscribe.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Subscribe *SubscribeCaller) IsPetrified(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "isPetrified")
	return *ret0, err
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Subscribe *SubscribeSession) IsPetrified() (bool, error) {
	return _Subscribe.Contract.IsPetrified(&_Subscribe.CallOpts)
}

// IsPetrified is a free data retrieval call binding the contract method 0xde4796ed.
//
// Solidity: function isPetrified() constant returns(bool)
func (_Subscribe *SubscribeCallerSession) IsPetrified() (bool, error) {
	return _Subscribe.Contract.IsPetrified(&_Subscribe.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Subscribe *SubscribeCaller) Kernel(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "kernel")
	return *ret0, err
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Subscribe *SubscribeSession) Kernel() (common.Address, error) {
	return _Subscribe.Contract.Kernel(&_Subscribe.CallOpts)
}

// Kernel is a free data retrieval call binding the contract method 0xd4aae0c4.
//
// Solidity: function kernel() constant returns(address)
func (_Subscribe *SubscribeCallerSession) Kernel() (common.Address, error) {
	return _Subscribe.Contract.Kernel(&_Subscribe.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() constant returns(uint256)
func (_Subscribe *SubscribeCaller) Price(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "price")
	return *ret0, err
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() constant returns(uint256)
func (_Subscribe *SubscribeSession) Price() (*big.Int, error) {
	return _Subscribe.Contract.Price(&_Subscribe.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() constant returns(uint256)
func (_Subscribe *SubscribeCallerSession) Price() (*big.Int, error) {
	return _Subscribe.Contract.Price(&_Subscribe.CallOpts)
}

// TokenManager is a free data retrieval call binding the contract method 0x2a709b14.
//
// Solidity: function tokenManager() constant returns(address)
func (_Subscribe *SubscribeCaller) TokenManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Subscribe.contract.Call(opts, out, "tokenManager")
	return *ret0, err
}

// TokenManager is a free data retrieval call binding the contract method 0x2a709b14.
//
// Solidity: function tokenManager() constant returns(address)
func (_Subscribe *SubscribeSession) TokenManager() (common.Address, error) {
	return _Subscribe.Contract.TokenManager(&_Subscribe.CallOpts)
}

// TokenManager is a free data retrieval call binding the contract method 0x2a709b14.
//
// Solidity: function tokenManager() constant returns(address)
func (_Subscribe *SubscribeCallerSession) TokenManager() (common.Address, error) {
	return _Subscribe.Contract.TokenManager(&_Subscribe.CallOpts)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Subscribe *SubscribeTransactor) Forward(opts *bind.TransactOpts, _evmScript []byte) (*types.Transaction, error) {
	return _Subscribe.contract.Transact(opts, "forward", _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Subscribe *SubscribeSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Subscribe.Contract.Forward(&_Subscribe.TransactOpts, _evmScript)
}

// Forward is a paid mutator transaction binding the contract method 0xd948d468.
//
// Solidity: function forward(bytes _evmScript) returns()
func (_Subscribe *SubscribeTransactorSession) Forward(_evmScript []byte) (*types.Transaction, error) {
	return _Subscribe.Contract.Forward(&_Subscribe.TransactOpts, _evmScript)
}

// Initialize is a paid mutator transaction binding the contract method 0xd32ce5ae.
//
// Solidity: function initialize(address _tokenManager, uint256 _price, uint64 _duration) returns()
func (_Subscribe *SubscribeTransactor) Initialize(opts *bind.TransactOpts, _tokenManager common.Address, _price *big.Int, _duration uint64) (*types.Transaction, error) {
	return _Subscribe.contract.Transact(opts, "initialize", _tokenManager, _price, _duration)
}

// Initialize is a paid mutator transaction binding the contract method 0xd32ce5ae.
//
// Solidity: function initialize(address _tokenManager, uint256 _price, uint64 _duration) returns()
func (_Subscribe *SubscribeSession) Initialize(_tokenManager common.Address, _price *big.Int, _duration uint64) (*types.Transaction, error) {
	return _Subscribe.Contract.Initialize(&_Subscribe.TransactOpts, _tokenManager, _price, _duration)
}

// Initialize is a paid mutator transaction binding the contract method 0xd32ce5ae.
//
// Solidity: function initialize(address _tokenManager, uint256 _price, uint64 _duration) returns()
func (_Subscribe *SubscribeTransactorSession) Initialize(_tokenManager common.Address, _price *big.Int, _duration uint64) (*types.Transaction, error) {
	return _Subscribe.Contract.Initialize(&_Subscribe.TransactOpts, _tokenManager, _price, _duration)
}

// SetDuration is a paid mutator transaction binding the contract method 0x4b852c03.
//
// Solidity: function setDuration(uint64 _duration) returns()
func (_Subscribe *SubscribeTransactor) SetDuration(opts *bind.TransactOpts, _duration uint64) (*types.Transaction, error) {
	return _Subscribe.contract.Transact(opts, "setDuration", _duration)
}

// SetDuration is a paid mutator transaction binding the contract method 0x4b852c03.
//
// Solidity: function setDuration(uint64 _duration) returns()
func (_Subscribe *SubscribeSession) SetDuration(_duration uint64) (*types.Transaction, error) {
	return _Subscribe.Contract.SetDuration(&_Subscribe.TransactOpts, _duration)
}

// SetDuration is a paid mutator transaction binding the contract method 0x4b852c03.
//
// Solidity: function setDuration(uint64 _duration) returns()
func (_Subscribe *SubscribeTransactorSession) SetDuration(_duration uint64) (*types.Transaction, error) {
	return _Subscribe.Contract.SetDuration(&_Subscribe.TransactOpts, _duration)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 _price) returns()
func (_Subscribe *SubscribeTransactor) SetPrice(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _Subscribe.contract.Transact(opts, "setPrice", _price)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 _price) returns()
func (_Subscribe *SubscribeSession) SetPrice(_price *big.Int) (*types.Transaction, error) {
	return _Subscribe.Contract.SetPrice(&_Subscribe.TransactOpts, _price)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 _price) returns()
func (_Subscribe *SubscribeTransactorSession) SetPrice(_price *big.Int) (*types.Transaction, error) {
	return _Subscribe.Contract.SetPrice(&_Subscribe.TransactOpts, _price)
}

// Subscribe is a paid mutator transaction binding the contract method 0x5bb80a5f.
//
// Solidity: function subscribe(address _subscriber, uint16 _units) returns()
func (_Subscribe *SubscribeTransactor) Subscribe(opts *bind.TransactOpts, _subscriber common.Address, _units uint16) (*types.Transaction, error) {
	return _Subscribe.contract.Transact(opts, "subscribe", _subscriber, _units)
}

// Subscribe is a paid mutator transaction binding the contract method 0x5bb80a5f.
//
// Solidity: function subscribe(address _subscriber, uint16 _units) returns()
func (_Subscribe *SubscribeSession) Subscribe(_subscriber common.Address, _units uint16) (*types.Transaction, error) {
	return _Subscribe.Contract.Subscribe(&_Subscribe.TransactOpts, _subscriber, _units)
}

// Subscribe is a paid mutator transaction binding the contract method 0x5bb80a5f.
//
// Solidity: function subscribe(address _subscriber, uint16 _units) returns()
func (_Subscribe *SubscribeTransactorSession) Subscribe(_subscriber common.Address, _units uint16) (*types.Transaction, error) {
	return _Subscribe.Contract.Subscribe(&_Subscribe.TransactOpts, _subscriber, _units)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Subscribe *SubscribeTransactor) TransferToVault(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Subscribe.contract.Transact(opts, "transferToVault", _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Subscribe *SubscribeSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Subscribe.Contract.TransferToVault(&_Subscribe.TransactOpts, _token)
}

// TransferToVault is a paid mutator transaction binding the contract method 0x9d4941d8.
//
// Solidity: function transferToVault(address _token) returns()
func (_Subscribe *SubscribeTransactorSession) TransferToVault(_token common.Address) (*types.Transaction, error) {
	return _Subscribe.Contract.TransferToVault(&_Subscribe.TransactOpts, _token)
}

// SubscribeDurationChangeIterator is returned from FilterDurationChange and is used to iterate over the raw logs and unpacked data for DurationChange events raised by the Subscribe contract.
type SubscribeDurationChangeIterator struct {
	Event *SubscribeDurationChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubscribeDurationChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubscribeDurationChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubscribeDurationChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubscribeDurationChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubscribeDurationChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubscribeDurationChange represents a DurationChange event raised by the Subscribe contract.
type SubscribeDurationChange struct {
	Duration *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDurationChange is a free log retrieval operation binding the contract event 0x9771dcd88da06c5d793ea0f12967f1054cc82bf08b1f0fba39567aaf3ecb87a3.
//
// Solidity: event DurationChange(uint256 duration)
func (_Subscribe *SubscribeFilterer) FilterDurationChange(opts *bind.FilterOpts) (*SubscribeDurationChangeIterator, error) {

	logs, sub, err := _Subscribe.contract.FilterLogs(opts, "DurationChange")
	if err != nil {
		return nil, err
	}
	return &SubscribeDurationChangeIterator{contract: _Subscribe.contract, event: "DurationChange", logs: logs, sub: sub}, nil
}

// WatchDurationChange is a free log subscription operation binding the contract event 0x9771dcd88da06c5d793ea0f12967f1054cc82bf08b1f0fba39567aaf3ecb87a3.
//
// Solidity: event DurationChange(uint256 duration)
func (_Subscribe *SubscribeFilterer) WatchDurationChange(opts *bind.WatchOpts, sink chan<- *SubscribeDurationChange) (event.Subscription, error) {

	logs, sub, err := _Subscribe.contract.WatchLogs(opts, "DurationChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubscribeDurationChange)
				if err := _Subscribe.contract.UnpackLog(event, "DurationChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SubscribePriceChangeIterator is returned from FilterPriceChange and is used to iterate over the raw logs and unpacked data for PriceChange events raised by the Subscribe contract.
type SubscribePriceChangeIterator struct {
	Event *SubscribePriceChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubscribePriceChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubscribePriceChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubscribePriceChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubscribePriceChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubscribePriceChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubscribePriceChange represents a PriceChange event raised by the Subscribe contract.
type SubscribePriceChange struct {
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPriceChange is a free log retrieval operation binding the contract event 0xf347ee99503bf19c028bd6b18f3c676e82a9bb5b2bb5225aebe0fd62fd6a0d19.
//
// Solidity: event PriceChange(uint256 price)
func (_Subscribe *SubscribeFilterer) FilterPriceChange(opts *bind.FilterOpts) (*SubscribePriceChangeIterator, error) {

	logs, sub, err := _Subscribe.contract.FilterLogs(opts, "PriceChange")
	if err != nil {
		return nil, err
	}
	return &SubscribePriceChangeIterator{contract: _Subscribe.contract, event: "PriceChange", logs: logs, sub: sub}, nil
}

// WatchPriceChange is a free log subscription operation binding the contract event 0xf347ee99503bf19c028bd6b18f3c676e82a9bb5b2bb5225aebe0fd62fd6a0d19.
//
// Solidity: event PriceChange(uint256 price)
func (_Subscribe *SubscribeFilterer) WatchPriceChange(opts *bind.WatchOpts, sink chan<- *SubscribePriceChange) (event.Subscription, error) {

	logs, sub, err := _Subscribe.contract.WatchLogs(opts, "PriceChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubscribePriceChange)
				if err := _Subscribe.contract.UnpackLog(event, "PriceChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SubscribeRecoverToVaultIterator is returned from FilterRecoverToVault and is used to iterate over the raw logs and unpacked data for RecoverToVault events raised by the Subscribe contract.
type SubscribeRecoverToVaultIterator struct {
	Event *SubscribeRecoverToVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubscribeRecoverToVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubscribeRecoverToVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubscribeRecoverToVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubscribeRecoverToVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubscribeRecoverToVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubscribeRecoverToVault represents a RecoverToVault event raised by the Subscribe contract.
type SubscribeRecoverToVault struct {
	Vault  common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRecoverToVault is a free log retrieval operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Subscribe *SubscribeFilterer) FilterRecoverToVault(opts *bind.FilterOpts, vault []common.Address, token []common.Address) (*SubscribeRecoverToVaultIterator, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Subscribe.contract.FilterLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &SubscribeRecoverToVaultIterator{contract: _Subscribe.contract, event: "RecoverToVault", logs: logs, sub: sub}, nil
}

// WatchRecoverToVault is a free log subscription operation binding the contract event 0x596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02.
//
// Solidity: event RecoverToVault(address indexed vault, address indexed token, uint256 amount)
func (_Subscribe *SubscribeFilterer) WatchRecoverToVault(opts *bind.WatchOpts, sink chan<- *SubscribeRecoverToVault, vault []common.Address, token []common.Address) (event.Subscription, error) {

	var vaultRule []interface{}
	for _, vaultItem := range vault {
		vaultRule = append(vaultRule, vaultItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Subscribe.contract.WatchLogs(opts, "RecoverToVault", vaultRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubscribeRecoverToVault)
				if err := _Subscribe.contract.UnpackLog(event, "RecoverToVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SubscribeScriptResultIterator is returned from FilterScriptResult and is used to iterate over the raw logs and unpacked data for ScriptResult events raised by the Subscribe contract.
type SubscribeScriptResultIterator struct {
	Event *SubscribeScriptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubscribeScriptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubscribeScriptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubscribeScriptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubscribeScriptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubscribeScriptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubscribeScriptResult represents a ScriptResult event raised by the Subscribe contract.
type SubscribeScriptResult struct {
	Executor   common.Address
	Script     []byte
	Input      []byte
	ReturnData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScriptResult is a free log retrieval operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Subscribe *SubscribeFilterer) FilterScriptResult(opts *bind.FilterOpts, executor []common.Address) (*SubscribeScriptResultIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Subscribe.contract.FilterLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return &SubscribeScriptResultIterator{contract: _Subscribe.contract, event: "ScriptResult", logs: logs, sub: sub}, nil
}

// WatchScriptResult is a free log subscription operation binding the contract event 0x5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad9.
//
// Solidity: event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)
func (_Subscribe *SubscribeFilterer) WatchScriptResult(opts *bind.WatchOpts, sink chan<- *SubscribeScriptResult, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _Subscribe.contract.WatchLogs(opts, "ScriptResult", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubscribeScriptResult)
				if err := _Subscribe.contract.UnpackLog(event, "ScriptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SubscribeSubscribeIterator is returned from FilterSubscribe and is used to iterate over the raw logs and unpacked data for Subscribe events raised by the Subscribe contract.
type SubscribeSubscribeIterator struct {
	Event *SubscribeSubscribe // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubscribeSubscribeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubscribeSubscribe)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubscribeSubscribe)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubscribeSubscribeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubscribeSubscribeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubscribeSubscribe represents a Subscribe event raised by the Subscribe contract.
type SubscribeSubscribe struct {
	Subscriber common.Address
	Purchaser  common.Address
	Expiration uint64
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubscribe is a free log retrieval operation binding the contract event 0x220fbaf9a68a6476b8e93e08bb41b5a6813097dad659462a9a41af1a5379d9fe.
//
// Solidity: event Subscribe(address indexed subscriber, address purchaser, uint64 expiration)
func (_Subscribe *SubscribeFilterer) FilterSubscribe(opts *bind.FilterOpts, subscriber []common.Address) (*SubscribeSubscribeIterator, error) {

	var subscriberRule []interface{}
	for _, subscriberItem := range subscriber {
		subscriberRule = append(subscriberRule, subscriberItem)
	}

	logs, sub, err := _Subscribe.contract.FilterLogs(opts, "Subscribe", subscriberRule)
	if err != nil {
		return nil, err
	}
	return &SubscribeSubscribeIterator{contract: _Subscribe.contract, event: "Subscribe", logs: logs, sub: sub}, nil
}

// WatchSubscribe is a free log subscription operation binding the contract event 0x220fbaf9a68a6476b8e93e08bb41b5a6813097dad659462a9a41af1a5379d9fe.
//
// Solidity: event Subscribe(address indexed subscriber, address purchaser, uint64 expiration)
func (_Subscribe *SubscribeFilterer) WatchSubscribe(opts *bind.WatchOpts, sink chan<- *SubscribeSubscribe, subscriber []common.Address) (event.Subscription, error) {

	var subscriberRule []interface{}
	for _, subscriberItem := range subscriber {
		subscriberRule = append(subscriberRule, subscriberItem)
	}

	logs, sub, err := _Subscribe.contract.WatchLogs(opts, "Subscribe", subscriberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubscribeSubscribe)
				if err := _Subscribe.contract.UnpackLog(event, "Subscribe", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
